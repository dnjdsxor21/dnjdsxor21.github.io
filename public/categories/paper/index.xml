<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Paper on 누누타운</title>
    <link>http://localhost:1313/categories/paper/</link>
    <description>Recent content in Paper on 누누타운</description>
    <generator>Hugo</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 04 Apr 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/paper/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[논문리뷰] Attention is all you need #3</title>
      <link>http://localhost:1313/posts/paper/attention-is-all-you-need-3/</link>
      <pubDate>Tue, 04 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/paper/attention-is-all-you-need-3/</guid>
      <description>&lt;h2 id=&#34;multihead-attention&#34;&gt;Multihead attention&lt;/h2&gt;&#xA;&lt;p&gt;multihead를 하는 이유 - 각각의 attention는 토큰 간의 관계(유사도)를 통해 어텐션을 구하고 종속성을 계산하며, 각각의 head는 다른 유형의 종속성을 가지게 된다.&lt;/p&gt;&#xA;&lt;p&gt;(문장타입에집중, 관계에 집중, 명사에집중, 강조에 집중)&lt;/p&gt;&#xA;&lt;h2 id=&#34;논문과-실제-코드에서-나타나는-차이점&#34;&gt;논문과 실제 코드에서 나타나는 차이점&lt;/h2&gt;&#xA;&lt;p&gt;논문 : Q,K,V를 각각의 dimension size로 계산해서 똑같이 z를 얻는다 -&amp;gt; z를 모두 concat -&amp;gt; linear연산으로 차원을 축소시켜서 input dimension과 동일하게 맞춰준다.&lt;br&gt;&#xA;따라서 concate(z)의 size = n_head x n_Q x dim_V 이고, linear를 지났을 때의 output의 size = n_Q x dim_input&lt;/p&gt;</description>
    </item>
    <item>
      <title>[논문리뷰] Attention is all you need #2</title>
      <link>http://localhost:1313/posts/paper/attention-is-all-you-need-2/</link>
      <pubDate>Mon, 03 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/paper/attention-is-all-you-need-2/</guid>
      <description>&lt;h2 id=&#34;attention-self-attention&#34;&gt;Attention, Self-attention&lt;/h2&gt;&#xA;&lt;p&gt;일반적으로 어텐션이란, 입력값에서 중요한 단어들에 더 집중할 수 있도록 한다.&lt;br&gt;&#xA;문장을 병렬적으로 처리하기 때문에 속도가 비교적 빠르다.&lt;br&gt;&#xA;RNN구조에서는 순차적으로 값을 확인하기 때문에 gradient vanishing/exploding문제가 발생하게 된다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;self-attention&#34;&gt;Self-attention&lt;/h2&gt;&#xA;&lt;p&gt;같은 문장 내에서 단어들 간의 관계를 나타낸다. attention의 입력값은 Q,K,V&lt;/p&gt;&#xA;&lt;h2 id=&#34;qkv&#34;&gt;Q,K,V&lt;/h2&gt;&#xA;&lt;p&gt;어텐션의 목표는 value의 weighted sum을 구하는것이고, 각 가중치는 Q,K가 얼마나 유사한지에 따라 결정된다.&lt;br&gt;&#xA;Query - 소스벡터, 유사도를 계산하는 값&lt;br&gt;&#xA;Key - 타겟벡터, 유사도를 계산하는 값&lt;br&gt;&#xA;Value - key에 해당하는 정보로 값을 계산, 최종 출력계산에 사용&lt;br&gt;&#xA;각각의 값은 인풋이 Linear연산을 거쳐서 구한다. - 벡터의 차원을 줄여준다.&lt;br&gt;&#xA;Q.size = n x d_K&lt;br&gt;&#xA;K.size = m x d_K&lt;br&gt;&#xA;V. size = m x d_V&lt;br&gt;&#xA;Z.size = n x d_V&lt;br&gt;&#xA;왜 실습에서는 3차원이지? -&amp;gt; 각 단어의 갯수만큼 연산하므로 n_Q, n_K, n_V가 존재&lt;br&gt;&#xA;Q, K 의 dimension은 동일해야함&lt;br&gt;&#xA;n_batch가 의미하는 것????? - data의 개수, ‘문장’의 개수&lt;br&gt;&#xA;dim_V의 값은 정해져있지 않다. 어차피 Linear연산을 마지막에 한번 더 수행하여 z를 얻는다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>[논문리뷰] Attention is all you need #1</title>
      <link>http://localhost:1313/posts/paper/attention-is-all-you-need-1/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>http://localhost:1313/posts/paper/attention-is-all-you-need-1/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/75467530/230660894-458594f7-9c04-45f9-9659-5be94e85398d.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;워드-임베딩&#34;&gt;워드 임베딩&lt;/h2&gt;&#xA;&lt;p&gt;각 단어들은 Word2Index를 통해 정수인코딩을 하고, 그 정수값을 임베딩 벡터로 변환한다.&lt;br&gt;&#xA;이때 논문에서 임베딩dim 은 512이다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;pepositional-encoding&#34;&gt;PE(positional encoding)&lt;/h2&gt;&#xA;&lt;p&gt;트랜스포머 이전에는 RNN모델을 많이 사용했다. 순차적으로 문장을 처리하기 때문에, 계산유닛이 많아도 앞에서부터 하나씩 처리한다. 결국 연산속도가 매우 느리다.&lt;br&gt;&#xA;트랜스포머는 문장을 병렬적으로, 한번에 처리한다. 병렬적으로 한번에 처리한다는 것은, 단어의 위치를 알 수 없다는 뜻이다. 따라서 PE를 통해 위치순서를 나타낼 필요가 있다.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;모든 PE값은 시퀀스의 길이나 값에 관계없이 동일한 식별자를 가져야한다.&lt;/li&gt;&#xA;&lt;li&gt;모든 PE값은 너무 크면 안된다. 워드 임베딩 값이 상대적으로 작아지게된다.&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;PE를 위한 sin, cos함수 - [-1, 1]사이를 주기적으로 반복하기 때문에 긴 문장에서도 위치 벡터값이 너무 커지지 않으면서, 너무 미미한 차이를 보이지도 않는다.&lt;br&gt;&#xA;PE는 단어벡터와 같은 차원의 벡터값이다. 따라서 벡터차원만큼의 주기함수 차원을 가지게 되고, 모든 주기함수의 주기 공배수가 되지 않는 이상 값이 겹치지 않는다.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
