<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>NLP on 누누타운</title>
    <link>https://dnjdsxor21.github.io/categories/nlp/</link>
    <description>Recent content in NLP on 누누타운</description>
    <generator>Hugo</generator>
    <language>ko-KR</language>
    <lastBuildDate>Tue, 09 May 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://dnjdsxor21.github.io/categories/nlp/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Huggingface 모델 저장하고 불러오기</title>
      <link>https://dnjdsxor21.github.io/posts/nlp/how-to-save-and-load-huggingface/</link>
      <pubDate>Tue, 09 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dnjdsxor21.github.io/posts/nlp/how-to-save-and-load-huggingface/</guid>
      <description>&lt;h2 id=&#34;huggingface-를-사용하면-모델-불러오기-저장이-훨씬-쉽다&#34;&gt;HuggingFace 를 사용하면 모델 불러오기, 저장이 훨씬 쉽다.&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AutoModel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MODEL_NAME &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;klue/bert-base&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 학습 전 모델 불러오기&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AutoModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(MODEL_NAME)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# 학습 후 모델 저장하기&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;save_pretrained(OUTPUT_DIR)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;huggingface-hub&#34;&gt;HuggingFace Hub&lt;/h2&gt;&#xA;&lt;p&gt;허깅페이스에도 깃허브처럼 &amp;lsquo;모델&amp;rsquo;과 &amp;lsquo;데이터셋&amp;rsquo;을 저장할 수 있는 저장공간이 존재한다!&lt;/p&gt;&#xA;&lt;p&gt;위에서는 &lt;code&gt;klue/bert-base&lt;/code&gt;를 허브에서 불러왔으며, OUTPUT_DIR(local 환경)에 저장했다.&lt;/p&gt;&#xA;&lt;p&gt;먼저 local 환경(내 컴퓨터)에서 모델을 불러와보자.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; AutoModel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;MODEL_PATH &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;/opt/ml/bert/checkpoint-100&amp;#39;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; AutoModel&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;from_pretrained(MODEL_PATH)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;사실 위와 똑같은 방법이다.&lt;br&gt;&#xA;이때 &lt;code&gt;MODEL_PATH&lt;/code&gt;에는 &lt;code&gt;config.json&lt;/code&gt;, &lt;code&gt;pytorch_model.bin&lt;/code&gt; 등등의 파일이 있어야함!&lt;br&gt;&#xA;코드가 같은 이유는 허깅페이스 허브에 모델이 있는지 확인하고, 없으면 로컬 디렉토리에 모델이 있는지 체크한다.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Huggingface BERT 모델(BertModel, BertForSequenceClassification, BertForMaskedLM, BertForTokenClassification)</title>
      <link>https://dnjdsxor21.github.io/posts/nlp/huggingface-bert-model/</link>
      <pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate>
      <guid>https://dnjdsxor21.github.io/posts/nlp/huggingface-bert-model/</guid>
      <description>&lt;h2 id=&#34;bert-모델-사용하기&#34;&gt;BERT 모델 사용하기&lt;/h2&gt;&#xA;&lt;p&gt;허깅페이스에서 BERT 모델을 불러와서 사용할 때 목적에 맞게 다양한 함수를 불러온다.&lt;/p&gt;&#xA;&lt;p&gt;예를 들어, STS(Semantic Textual Similarity) task에서 두 문장이 비슷한지 아닌지를 분류하는 문제를 풀기 위해, CLS토큰을 사용하여 학습을 할 것이다. &lt;code&gt;BertForSequenceClassification&lt;/code&gt;를 사용하면 &amp;ldquo;BERT모델의 CLS토큰에 분류를 위한 Linear모델을 추가한 모델&amp;quot;을 불러올 수 있다.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; transformers &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; BertForSequenceClassification&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;model &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; BertForSequenceClassification(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;klue/bert-base&amp;#39;&lt;/span&gt;, num_labels&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;또는 BERT의 pre-training방법중 하나인 MLM을 수행하기 위해 &lt;code&gt;BertForMaskedLM&lt;/code&gt;을 사용하면 쉽게 모델을 불러올 수 있다.&lt;/p&gt;&#xA;&lt;h2 id=&#34;bertmodel&#34;&gt;BertModel&lt;/h2&gt;&#xA;&lt;p&gt;BERT 기본 모델을 불러오려면 역시 &lt;code&gt;BertModel&lt;/code&gt;를 사용 해야 할 것이다.(또는 &lt;code&gt;AutoModel&lt;/code&gt;)&lt;/p&gt;</description>
    </item>
    <item>
      <title>[RNN, LSTM, GRU] RNN 기반 모델 구조</title>
      <link>https://dnjdsxor21.github.io/posts/nlp/rnn-based-models/</link>
      <pubDate>Fri, 03 Mar 2023 15:52:10 +0900</pubDate>
      <guid>https://dnjdsxor21.github.io/posts/nlp/rnn-based-models/</guid>
      <description>&lt;h1 id=&#34;rnn-recurrent-nueral-network&#34;&gt;RNN (Recurrent Nueral Network)&lt;/h1&gt;&#xA;&lt;p&gt;은닉층에서 나온 결과값이 다시 은닉층으로 돌아가 새로운 입력값과 연산을 하는 구조&lt;/p&gt;&#xA;&lt;p&gt;시계열 데이터, 텍스트 데이터같은 가변길이의 데이터에 적합한 모델&lt;/p&gt;&#xA;&lt;p&gt;학습을 통해 각 단어 다음에 나올 단어를 예측&lt;/p&gt;&#xA;&lt;h3 id=&#34;lstm&#34;&gt;LSTM&lt;/h3&gt;&#xA;&lt;p&gt;hiddne state는 벡터값이고,&#xA;$y = W*h$&lt;/p&gt;&#xA;&lt;p&gt;LSTM의 경우 과거 정보를 가져갈지 말지를 정하는 cell state가 존재.&#xA;여기서 c, h는 같은 크기의 벡터이다. 따라서 가중치행렬 사이즈는 두가지 종류임.&lt;/p&gt;&#xA;&lt;p&gt;$x \rightarrow h$&#xA;$h \rightarrow h$&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;각각의 연산에서 행렬의 곱셈부분이 inner product인지 element-wise product인지 확인할 필요가 있다.&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
